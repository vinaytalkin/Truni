# Generated by Django 3.0.4 on 2020-03-05 11:01

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='RequestTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_ip', models.CharField(blank=True, max_length=250, null=True)),
                ('request_url', models.CharField(blank=True, max_length=250, null=True)),
                ('resp_code', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserImagesUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('userprofile', models.ImageField(upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(max_length=250)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('U', 'Unsure')], max_length=10)),
                ('email_id', models.EmailField(max_length=250)),
                ('father_name', models.CharField(max_length=100)),
                ('dob', models.DateField(blank=True)),
                ('spouse_name', models.CharField(max_length=100)),
                ('current_residency_address', models.CharField(max_length=100)),
                ('current_zip_code', models.CharField(max_length=20)),
                ('current_state', models.CharField(max_length=100)),
                ('current_country', models.CharField(max_length=100)),
                ('permanent_address', models.CharField(max_length=100)),
                ('permanent_zip_code', models.CharField(max_length=20)),
                ('permanent_state', models.CharField(max_length=100)),
                ('permanent_country', models.CharField(max_length=100)),
                ('personal_contact_no', models.IntegerField(blank=True)),
                ('emergency_contact_no', models.IntegerField(blank=True)),
                ('highest_education', models.CharField(blank=True, max_length=250)),
                ('educational_institute_name', models.CharField(blank=True, max_length=250)),
                ('year_of_passing', models.DateField(blank=True)),
                ('previous_employee_name', models.CharField(blank=True, max_length=250)),
                ('previous_empoyee_from', models.DateField(blank=True)),
                ('previous_empoyee_to', models.DateField(blank=True)),
                ('pan_no', models.CharField(blank=True, max_length=250)),
                ('bank_details_for_salary', models.CharField(max_length=100)),
                ('active_user', models.BooleanField()),
                ('employee_info', models.CharField(choices=[('F', 'Full Time'), ('P', 'Part Time'), ('O', 'Other')], max_length=10)),
                ('agreeterms', models.BooleanField()),
                ('userprofile', models.ImageField(upload_to='images/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
